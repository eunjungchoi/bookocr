"""
Django settings for bookocr project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import dj_database_url


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get('DEBUG'))


LOGIN_URL = '/login/'


# Application definition

INSTALLED_APPS = [
	'bookshot.apps.BookshotConfig',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'django.contrib.humanize',
	'social.apps.django_app.default',
	'storages', #
	# 'django_s3_storage',
]



MIDDLEWARE_CLASSES = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'bookocr.urls'

TEMPLATES = [
	{
	    'BACKEND': 'django.template.backends.django.DjangoTemplates',
	    'DIRS': [],
	    'APP_DIRS': True,
	    'OPTIONS': {
	        'debug': DEBUG,
	        'context_processors': [
	            'django.contrib.auth.context_processors.auth',
	            'django.contrib.messages.context_processors.messages',
	            'django.template.context_processors.debug',
	            'django.template.context_processors.request',
	            'django.template.context_processors.i18n',
	            'django.template.context_processors.media',
	            'django.template.context_processors.static',
	            'django.template.context_processors.tz',
	            'social.apps.django_app.context_processors.backends',
	            'social.apps.django_app.context_processors.login_redirect',
				'bookshot.context_processors.profile',
	        ],
	    },
	},
]

WSGI_APPLICATION = 'bookocr.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
	'default': {
	    'ENGINE': 'django.db.backends.sqlite3',
	    'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
	}
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
	    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
	    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
	    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
	    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


AUTHENTICATION_BACKENDS = (
	'social.backends.facebook.FacebookOAuth2',
	'django.contrib.auth.backends.ModelBackend',
)

#
# social.apps.django_app settings
# https://github.com/omab/python-social-auth
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
SOCIAL_AUTH_URL_NAMESPACE = 'social'

SOCIAL_AUTH_FACEBOOK_KEY = os.environ.get('FACEBOOK_KEY')
SOCIAL_AUTH_FACEBOOK_SECRET = os.environ.get('FACEBOOK_SECRET')

SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
  'fields': 'id, name, email, age_range'
}

# session serializer required by social app
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'

# Internaxtionalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Seoul' #'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Update database configuration with $DATABASE_URL.
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)

# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Allow all host headers
ALLOWED_HOSTS = ['*']

INTERNAL_IPS = [
	'127.0.0.1',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = [
	os.path.join(PROJECT_ROOT, 'static'),
]

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
#STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


#
# Google API
#

# Sever API key
# tailing underscore(_) stands that it's application made, not by google
GOOGLE_SERVER_APIKEY_ = os.environ.get('GOOGLE_SERVER_APIKEY_')

# Server Account key
GOOGLE_APPLICATION_CREDENTIALS = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')

# Server Account key, each values
# Use this if you cannot specify a file (eg, heroku)
GOOGLE_APPLICATION_CREDENTIALS__TYPE                        = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS__type')
GOOGLE_APPLICATION_CREDENTIALS__PROJECT_ID                  = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS__project_id')
GOOGLE_APPLICATION_CREDENTIALS__PRIVATE_KEY_ID              = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS__private_key_id')
GOOGLE_APPLICATION_CREDENTIALS__PRIVATE_KEY                 = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS__private_key').replace('\\n', '\n')
GOOGLE_APPLICATION_CREDENTIALS__CLIENT_EMAIL                = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS__client_email')
GOOGLE_APPLICATION_CREDENTIALS__CLIENT_ID                   = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS__client_id')
GOOGLE_APPLICATION_CREDENTIALS__AUTH_URI                    = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS__auth_uri')
GOOGLE_APPLICATION_CREDENTIALS__TOKEN_URI                   = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS__token_uri')
GOOGLE_APPLICATION_CREDENTIALS__AUTH_PROVIDER_X509_CERT_URL = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS__auth_provider_x509_cert_url')
GOOGLE_APPLICATION_CREDENTIALS__CLIENT_X509_CERT_URL        = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS__client_x509_cert_url')

